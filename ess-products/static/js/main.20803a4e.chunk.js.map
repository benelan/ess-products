{"version":3,"sources":["components/ui/VirtualScroll.jsx","components/ui/Product.jsx","components/ui/Technology.jsx","components/ui/Result.jsx","components/ErrorBoundary.jsx","components/Search.jsx","components/ui/About.jsx","components/ui/Navb.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["VirtualScroll","Item","itemCount","height","childHeight","renderAhead","useState","scrollTop","setScrollTop","ref","useRef","onScroll","e","requestAnimationFrame","target","useEffect","scrollContainer","current","addEventListener","removeEventListener","useScrollAware","totalHeight","startNode","Math","floor","max","visibleNodeCount","ceil","min","offsetY","visibleChildren","useMemo","Array","fill","map","_","index","key","toString","style","overflow","className","willChange","position","transform","defaultProps","memo","Product","props","state","activeTab","updateWindowDimensions","bind","toggle","tab","setState","clearProd","inputProd","value","window","history","replaceState","document","title","clearBuzz","inputBuzz","clear","this","onProductChange","onBuzzwordsChange","params","URL","location","searchParams","product","xss","get","buzzwords","setTimeout","innerHeight","onResult","filtered","ListGroupItem","color","fontSize","onClick","tag","action","displayName","Nav","tabs","border","NavItem","NavLink","cursor","classnames","active","TabContent","TabPane","tabId","Card","body","Input","innerRef","input","type","name","id","background","onChange","replace","placeholder","ListGroup","length","React","Component","undefined","Technology","inputTech","label","techList","onTechnologyChange","dropdownStyles","control","styles","backgroundColor","boxShadow","minHeight","menu","base","marginTop","left","width","minWidth","option","isFocused","paddingTop","paddingBottom","items","tech","Label","marginBottom","for","defaultValue","options","Result","results","linkStyle","visibleQueue","supportMethod","url","rel","href","email","includes","ErrorBoundary","hasError","resetComponentState","error","errorInfo","console","log","resetState","reload","children","buttonClass","buttonText","Search","query","technology","handleProductChange","handleBuzzwordsChange","handleTechnologyChange","handleFilterClick","q","search","split","forEach","prod","buzz","t","item","matches","find","res","queueArray","queue","entry","trim","temp","buzzTechs","Set","Object","values","matchData","metadata","keys","buzzTech","add","substr","queryString","createSearchString","findResult","newProd","prevState","doSearch","newBuzz","newTech","resultsClone","isMobile","buttonDisabled","Row","Col","md","size","offset","Button","outline","disabled","About","buttonLabel","modal","setModal","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","Navb","setIsOpen","padding","margin","marginLeft","marginRight","Navbar","dark","expand","NavbarBrand","src","process","alt","NavbarToggler","Collapse","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","top","DropdownItem","App","setIndex","setProd","setTech","technologyList","setTechList","setMobile","getData","pathToCSV","Promise","resolve","reject","Papa","parse","download","complete","data","err","parseData","jsonData","header","len","i","push","row","idx","object","strippedT","strippedQ","createIndex","documents","techArray","lunr","pipeline","remove","stemmer","trimmer","stopWordFilter","searchPipeline","field","doc","a","response","mobile","test","navigator","userAgent","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.20803a4e.chunk.js","sourcesContent":["import React, {\r\n  memo, useMemo, useRef, useState, useEffect,\r\n} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Generic hook for detecting scroll:\r\nconst useScrollAware = () => {\r\n  const [scrollTop, setScrollTop] = useState(0)\r\n  const ref = useRef()\r\n\r\n  const onScroll = (e) => requestAnimationFrame(() => {\r\n    setScrollTop(e.target.scrollTop)\r\n  })\r\n\r\n  useEffect(() => {\r\n    const scrollContainer = ref.current\r\n\r\n    setScrollTop(scrollContainer.scrollTop)\r\n    scrollContainer.addEventListener('scroll', onScroll)\r\n    return () => scrollContainer.removeEventListener('scroll', onScroll)\r\n  }, [])\r\n\r\n  return [scrollTop, ref]\r\n}\r\n\r\n/**\r\n * Virtual Scroll UI component\r\n * @component\r\n */\r\nconst VirtualScroll = ({\r\n  Item,\r\n  itemCount,\r\n  height,\r\n  childHeight,\r\n  renderAhead = 20,\r\n}) => {\r\n  const [scrollTop, ref] = useScrollAware()\r\n  const totalHeight = itemCount * childHeight\r\n\r\n  let startNode = Math.floor(scrollTop / childHeight) - renderAhead\r\n  startNode = Math.max(0, startNode)\r\n\r\n  let visibleNodeCount = Math.ceil(height / childHeight) + 2 * renderAhead\r\n  visibleNodeCount = Math.min(itemCount - startNode, visibleNodeCount)\r\n\r\n  // fixes 'Invalid Array Length' error\r\n  visibleNodeCount = Math.max(0, visibleNodeCount)\r\n  visibleNodeCount = Math.min(32 ** 2 - 1, visibleNodeCount)\r\n\r\n  const offsetY = startNode * childHeight\r\n\r\n  const visibleChildren = useMemo(\r\n    () => new Array(visibleNodeCount)\r\n      .fill(null)\r\n      .map((_, index) => (\r\n        <Item key={index.toString() + startNode} index={index + startNode} />\r\n      )),\r\n    [startNode, visibleNodeCount],\r\n  )\r\n\r\n  return (\r\n    <div style={{ height, overflow: 'auto' }} ref={ref}>\r\n      <div\r\n        className=\"viewport\"\r\n        style={{\r\n          overflow: 'hidden',\r\n          willChange: 'transform',\r\n          height: totalHeight,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            willChange: 'transform',\r\n            transform: `translateY(${offsetY}px)`,\r\n          }}\r\n        >\r\n          {visibleChildren}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nVirtualScroll.defaultProps = {\r\n  renderAhead: 20,\r\n}\r\n\r\nVirtualScroll.propTypes = {\r\n  /** the item to display */\r\n  Item: PropTypes.instanceOf(Object).isRequired,\r\n  /** the number of items to display */\r\n  itemCount: PropTypes.number.isRequired,\r\n  /** the height of the virtual scroll div */\r\n  height: PropTypes.number.isRequired,\r\n  /** the height of each item */\r\n  childHeight: PropTypes.number.isRequired,\r\n  /** how many items to render ahead as you scroll */\r\n  renderAhead: PropTypes.number,\r\n}\r\n\r\nexport default memo(VirtualScroll)\r\n","import React, { memo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport xss from 'xss'\r\nimport {\r\n  Input,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Card,\r\n} from 'reactstrap'\r\nimport classnames from 'classnames'\r\nimport VirtualScroll from './VirtualScroll'\r\n\r\n/**\r\n * Displays product/buzzword inputs and a virtual scroll search suggestion box\r\n * @component\r\n * @author Ben Elan & Lingtao Xie\r\n * @parent Search\r\n */\r\nclass Product extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      activeTab: '1',\r\n      height: 0,\r\n    }\r\n\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\r\n\r\n    // changes the tab\r\n    this.toggle = (tab) => {\r\n      if (this.activeTab !== tab) this.setState({ activeTab: tab })\r\n    }\r\n\r\n    // clears the product input value\r\n    this.clearProd = () => {\r\n      this.inputProd.value = ''\r\n      window.history.replaceState({}, document.title, '/products')\r\n    }\r\n\r\n    // clears the buzzword input value\r\n    this.clearBuzz = () => {\r\n      this.inputBuzz.value = ''\r\n      window.history.replaceState({}, document.title, '/products')\r\n    }\r\n\r\n    // clears both product and buzzword inputs\r\n    this.clear = () => {\r\n      this.clearProd()\r\n      this.clearBuzz()\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { onProductChange, onBuzzwordsChange } = this.props\r\n    this.updateWindowDimensions()\r\n    window.addEventListener('resize', this.updateWindowDimensions)\r\n    // get url params\r\n    const params = new URL(document.location).searchParams\r\n    // grab values and sanitize html\r\n    const product = xss(params.get('p'))\r\n    const buzzwords = xss(params.get('b'))\r\n    // has product url query\r\n    if (product) {\r\n      // put it in the input and execute change event func\r\n      this.inputProd.value = product\r\n      setTimeout(() => onProductChange(product), 666)\r\n      // has buzzword param and no product\r\n    } else if (buzzwords) {\r\n      // toggle to buzzwords tab\r\n      this.toggle('2')\r\n      // put it in the input and execute change event func\r\n      this.inputBuzz.value = buzzwords\r\n      setTimeout(() => onBuzzwordsChange(buzzwords), 666)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions)\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({ height: window.innerHeight })\r\n  }\r\n\r\n  render() {\r\n    // deconstruct props\r\n    const {\r\n      onBuzzwordsChange, onProductChange, onResult, filtered,\r\n    } = this.props\r\n\r\n    // deconstruct state\r\n    const { activeTab, height } = this.state\r\n\r\n    // Item for VirtualScroll component\r\n    const Item = memo(({ index }) => (\r\n      <ListGroupItem\r\n        key={index}\r\n        style={{\r\n          height: '70px',\r\n          color: 'black',\r\n          fontSize: '16px',\r\n        }}\r\n        className=\"highlightStyle\"\r\n        onClick={() => onResult(filtered[index])}\r\n        tag=\"button\"\r\n        action\r\n      >\r\n        {filtered[index].ref}\r\n      </ListGroupItem>\r\n    ))\r\n    Item.displayName = 'Item'\r\n\r\n    return (\r\n      <>\r\n        <Nav tabs style={{ color: '#ADC5CC', border: 'transparent' }}>\r\n          <NavItem>\r\n            <NavLink\r\n              style={{ cursor: 'pointer' }}\r\n              className={classnames({\r\n                active: activeTab === '1',\r\n              })}\r\n              onClick={() => { // when clicking on Product tab\r\n                onProductChange('') // pass empty value to parent\r\n                this.clearBuzz() // clear the buzzword input ref\r\n                this.toggle('1') // set product to active tab\r\n              }}\r\n            >\r\n              Product\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink\r\n              style={{ cursor: 'pointer' }}\r\n              className={classnames({\r\n                active: activeTab === '2',\r\n              })}\r\n              onClick={() => { // when clicking on Buzzword tab\r\n                onBuzzwordsChange('') // pass empty value to parent\r\n                this.clearProd() // clear the product input ref\r\n                this.toggle('2') // set buzzword to active tab\r\n              }}\r\n            >\r\n              Buzzwords\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <TabContent activeTab={activeTab}>\r\n          <TabPane tabId=\"1\">\r\n            <Card style={{ height: '82px' }} body>\r\n              <Input\r\n                innerRef={(input) => { this.inputProd = input }}\r\n                type=\"search\"\r\n                name=\"searchProduct\"\r\n                className=\"input\"\r\n                id=\"productInput\"\r\n                style={{ height: '40px', background: '#F7F9FA' }}\r\n                onChange={(e) => onProductChange(e.target.value.replace(/[^a-zA-Z ]/g, ' '))}\r\n                placeholder=\"Search by Product\"\r\n              />\r\n            </Card>\r\n          </TabPane>\r\n          <TabPane tabId=\"2\">\r\n            <Card style={{ height: '82px' }} body>\r\n              <Input\r\n                innerRef={(input) => { this.inputBuzz = input }}\r\n                type=\"search\"\r\n                name=\"searchBuzzwords\"\r\n                className=\"input\"\r\n                id=\"buzzwordsInput\"\r\n                style={{ height: '40px', background: '#F7F9FA' }}\r\n                onChange={(e) => onBuzzwordsChange(e.target.value.replace(/[^a-zA-Z ]/g, ' '))}\r\n                placeholder=\"Search by Buzzwords\"\r\n              />\r\n            </Card>\r\n          </TabPane>\r\n        </TabContent>\r\n        <ListGroup>\r\n          <VirtualScroll\r\n            itemCount={filtered.length}\r\n            height={height * 0.6}\r\n            childHeight={70}\r\n            Item={Item}\r\n          />\r\n        </ListGroup>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nProduct.defaultProps = {\r\n  index: undefined,\r\n}\r\n\r\nProduct.propTypes = {\r\n  /** event handler for product input */\r\n  onProductChange: PropTypes.func.isRequired,\r\n  /** event handler for technology input */\r\n  onBuzzwordsChange: PropTypes.func.isRequired,\r\n  /** event handler for clicking on a suggestion */\r\n  onResult: PropTypes.func.isRequired,\r\n  /** list of search suggestions */\r\n  filtered: PropTypes.instanceOf(Array).isRequired,\r\n  /** index for creating the virtual scroll */\r\n  index: PropTypes.number,\r\n}\r\n\r\nexport default Product\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Label, Card } from 'reactstrap'\r\nimport Select from 'react-select'\r\n\r\n/**\r\n * Displays dropdown input for Technologies\r\n * @component\r\n * @author Ben Elan & Lingtao Xie\r\n * @parent Search\r\n */\r\nconst Technology = class extends React.Component {\r\n  // resets the dropdown\r\n  clear() {\r\n    this.inputTech.state.value = { value: 'Any', label: 'Any' }\r\n  }\r\n\r\n  render() {\r\n    // deconstruct props\r\n    const { techList, onTechnologyChange } = this.props\r\n    // the style for the dropdown\r\n    const dropdownStyles = {\r\n      control: (styles) => ({ // unopened dropdown style\r\n        ...styles,\r\n        backgroundColor: '#F7F9FA',\r\n        cursor: 'pointer',\r\n        boxShadow: 'none',\r\n        minHeight: '40px',\r\n        height: '40px',\r\n      }),\r\n      menu: (base) => ({ // dropdown menu box\r\n        ...base,\r\n        marginTop: '21.5px',\r\n        left: '-20px',\r\n        width: 'calc(100% + 40px)',\r\n        boxShadow: '0.5px 0.5px 0.5px 0.5px lightgray',\r\n        minHeight: 'fit-content',\r\n        minWidth: 'fit-content',\r\n      }),\r\n      option: (styles, { isFocused }) => ({ // individual option elements\r\n        ...styles,\r\n        backgroundColor: isFocused ? '#bfdcae' : 'white',\r\n        ':active': {\r\n          ...styles[':active'],\r\n          backgroundColor: '#5cb85c',\r\n        },\r\n        color: 'black',\r\n        cursor: 'pointer',\r\n        minHeight: 'fit-content',\r\n        minWidth: 'fit-content',\r\n        paddingTop: '6px',\r\n        paddingBottom: '6px',\r\n        fontSize: '16px',\r\n      }),\r\n    }\r\n\r\n    // turn the tech list into react-select compatible object\r\n    const items = [\r\n      { value: 'Any', label: 'Any' },\r\n      ...techList.map((tech) => ({ value: tech, label: tech })),\r\n    ]\r\n\r\n    return (\r\n      <>\r\n        <Label style={{ marginBottom: '13px' }} for=\"exampleSelect\">\r\n          Technology\r\n        </Label>\r\n        <Card style={{ height: '82px' }} body>\r\n          <Select\r\n            ref={(input) => { this.inputTech = input }}\r\n            defaultValue={items[0]}\r\n            label=\"Select Technology\"\r\n            options={items}\r\n            styles={dropdownStyles}\r\n            onChange={(e) => onTechnologyChange(e.value)}\r\n          />\r\n        </Card>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nTechnology.propTypes = {\r\n  /** event handler for technology input */\r\n  onTechnologyChange: PropTypes.func.isRequired,\r\n  /** Array of technologies */\r\n  techList: PropTypes.instanceOf(Array).isRequired,\r\n}\r\n\r\nexport default Technology\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Label, ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\n/**\r\n * Displays selected product information\r\n * @component\r\n * @author Ben Elan & Lingtao Xie\r\n * @parent Search\r\n */\r\nconst Result = ({ results }) => {\r\n  // hyperlink color\r\n  const linkStyle = {\r\n    color: '#5cb85c',\r\n  }\r\n\r\n  // URLs for transfer resources\r\n  const geoData = 'https://esri.lightning.force.com/lightning/r/Knowledge__kav/ka15x0000008f0KAAQ/view'\r\n  const sdk = 'https://esri.lightning.force.com/lightning/r/Knowledge__kav/ka15x0000008kIXAAY/view'\r\n\r\n  return (\r\n    <>\r\n      { // if there are results, display them\r\n        results.product ? (\r\n          <>\r\n            <Label style={{ marginBottom: '13px' }} for=\"res\">Results</Label>\r\n            <ListGroup id=\"res\">\r\n              <ListGroupItem>\r\n                <b>Product: </b>\r\n                {results.product}\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <b>Queue: </b>\r\n                {results.visibleQueue}\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <b>Support Method: </b>\r\n                {results.supportMethod}\r\n              </ListGroupItem>\r\n\r\n              { // display reference url if there is one\r\n                results.url ? (\r\n                  <ListGroupItem>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" style={linkStyle} href={results.url}>\r\n                      <b>Reference</b>\r\n                    </a>\r\n                  </ListGroupItem>\r\n                ) : ('')\r\n              }\r\n              { // display email if there is one\r\n                results.email ? (\r\n                  <ListGroupItem>\r\n                    <b>Contact: </b>\r\n                    <a style={linkStyle} href={`mailto:${results.email}`}>\r\n                      {results.email}\r\n                    </a>\r\n                  </ListGroupItem>\r\n                ) : ('')\r\n              }\r\n              { // display data transfer resource if the data queue in results\r\n                results.visibleQueue.includes('Data') ? (\r\n                  <ListGroupItem>\r\n                    Please review\r\n                    {' '}\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" style={linkStyle} href={geoData}>this documentation</a>\r\n                    {' '}\r\n                    before transferring to Data Management.\r\n                  </ListGroupItem>\r\n                ) : ('')\r\n              }\r\n              { // display sdk transfer resource if the sdk queue in results\r\n                results.visibleQueue.includes('SDK') ? (\r\n                  <ListGroupItem>\r\n                    Please review\r\n                    {' '}\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" style={linkStyle} href={sdk}>this documentation</a>\r\n                    {' '}\r\n                    before transferring to Developer Products.\r\n                  </ListGroupItem>\r\n                ) : ('')\r\n              }\r\n            </ListGroup>\r\n          </>\r\n        ) : ('') // display nothing if there are no results\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nResult.propTypes = {\r\n  /** Result object to display */\r\n  results: PropTypes.instanceOf(Object).isRequired,\r\n}\r\n\r\nexport default Result\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * Error Boundary resets the state or refreshes the page if no resetState function is provided\r\n * @component\r\n */\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n    this.resetComponentState = this.resetComponentState.bind(this)\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo)\r\n  }\r\n\r\n  resetComponentState() {\r\n    const { resetState } = this.props\r\n    if (resetState) resetState()\r\n    else document.location.reload()\r\n    this.setState({ hasError: false })\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { children, buttonClass, buttonText } = this.props\r\n    if (hasError) {\r\n      return (\r\n        <div className=\"d-flex justify-content-center m-4\">\r\n          <button\r\n            type=\"button\"\r\n            className={buttonClass}\r\n            onClick={this.resetComponentState}\r\n          >\r\n            {buttonText}\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n    return children\r\n  }\r\n}\r\n\r\nErrorBoundary.defaultProps = {\r\n  resetState: null,\r\n  buttonClass: 'btn btn-outline-secondary btn-sm m-2',\r\n  buttonText: 'Something Went Wrong, Click To Reset.',\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n  /** the children */\r\n  children: PropTypes.node.isRequired,\r\n  /** the class of the reload button for css styling */\r\n  buttonClass: PropTypes.string,\r\n  /** the text for the reload button */\r\n  buttonText: PropTypes.string,\r\n  /** reset the state of the failed component */\r\n  resetState: PropTypes.func,\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport Product from './ui/Product'\r\nimport Technology from './ui/Technology'\r\nimport Result from './ui/Result'\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\n/**\r\n * Handles input change events from child UI components,\r\n *  creates and executes searches, finds resulting data\r\n * @author Ben Elan\r\n * @component\r\n * @parent App\r\n * @child Product, Technology, Result\r\n */\r\nclass Search extends React.Component {\r\n  /**\r\n    * Formulates a search string for use in Lunr\r\n    * @param {Object} input - contains the properties below\r\n    * @param  {Object} input.query - the selected items to search for\r\n    * @param  {Array} input.techList - the full list of technologies\r\n    * @return {String} the search string for Lunr\r\n  */\r\n  static createSearchString({ query, techList }) {\r\n    // * wildcard means anything can be  before or behind the search value\r\n    // ie *at* would include 'attack', 'fat', 'matter', etc\r\n    // + means it must contain the value\r\n    let q = '' // init query string\r\n    let search = false\r\n    // ---- FOR PRODUCT SEARCHES  ---- \\\\\r\n    if (query.product && query.product !== '') {\r\n      search = true\r\n      // split search words\r\n      const products = query.product.split(' ')\r\n      // iterate through search words, adding them all to product field search\r\n      products.forEach((prod) => {\r\n        q += ` +product:*${prod}*`\r\n      })\r\n      // add tech field search value if selected from dropdown\r\n      if (query.technology !== 'Any') {\r\n        q += ` +technology:${query.technology}`\r\n      }\r\n      // ---- FOR BUZZWORD SEARCHES  ---- \\\\\r\n    } else if (query.buzzwords && query.buzzwords !== '') {\r\n      search = true\r\n      // split search words\r\n      const buzzwords = query.buzzwords.split(' ')\r\n      // add tech field search value if selected from dropdown\r\n      if (query.technology !== 'Any') {\r\n        q += ` +technology:${query.technology}`\r\n        // iterate through the buzzwords adding them to the\r\n        // search value for the tech specified in the dropdown\r\n        buzzwords.forEach((buzz) => {\r\n          q += ` +b_${query.technology.replace(\r\n            /\\s/g,\r\n            '',\r\n          )}:*${buzz}*`\r\n        })\r\n      } else {\r\n        // if a tech isn't specified, iterate through the buzzwords\r\n        // adding them to the search value for all techs\r\n        techList.forEach((t) => {\r\n          buzzwords.forEach((buzz) => {\r\n            q += ` b_${t.replace(/\\s/g, '')}:*${buzz}*`\r\n          })\r\n        })\r\n      }\r\n    } else if (\r\n      query.buzzwords === ''\r\n      && query.buzzwords === ''\r\n      && query.technology !== 'Any'\r\n    ) {\r\n      search = true\r\n      q += `+technology:${query.technology}`\r\n    }\r\n\r\n    // if one of the conditionals above was met, do the search\r\n    if (search) {\r\n      return q\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n    * Finds product info after a suggestion is clicked on\r\n    * @param {Object} input - contains the properties below\r\n    * @param  {Object} input.item - the selected lunr search index item\r\n    * @param  {Object} input.query - the selected items to search for\r\n    * @param  {Array} input.prod - the products key/pair with all info\r\n    * @param  {Object} input.tech - the tech key/pair with the queues\r\n    * @return {Object} the product info to display in results\r\n  */\r\n  static findResult({\r\n    item, query, prod, tech,\r\n  }) {\r\n    // match the index ref to the full data structure to get all of the info\r\n    const matches = prod.find((res) => item.ref === res.product)\r\n    // create an array of queues\r\n    const queueArray = matches.queue.split(',').map((entry) => entry.trim())\r\n    // create a separate list of queues that will be visible in the results\r\n    matches.visibleQueue = [...matches.queue]\r\n\r\n    // if there is more than one queue\r\n    if (queueArray.length > 1) {\r\n      let temp = ''\r\n\r\n      // if a technology is selected\r\n      if (query.technology !== 'Any') {\r\n        // iterate through the queues\r\n        queueArray.forEach((q) => {\r\n          // check if the queue is in the selected technology\r\n          if (\r\n            tech[\r\n              query.technology.replace(/\\s/g, '')\r\n            ].includes(q.trim())\r\n          ) {\r\n            // if it is, add it to the visible list\r\n            temp += q.trim()\r\n          }\r\n        })\r\n        matches.visibleQueue = temp\r\n      }\r\n\r\n      // if we are doing a buzzword search and Technology is Any\r\n      if (\r\n        !!query.buzzwords\r\n        && query.technology === 'Any'\r\n      ) {\r\n        const buzzTechs = new Set() // init Set\r\n        // iterate through all of the buzzwords\r\n        Object.values(item.matchData.metadata).forEach((buzz) => {\r\n          // iterate through the techs that each buzzword matches\r\n          Object.keys(buzz).forEach((buzzTech) => {\r\n            // add the tech to the Set\r\n            buzzTechs.add(buzzTech.substr(2)) // removing the \"b_\"\r\n          })\r\n        })\r\n\r\n        // iterate through the queues\r\n        queueArray.forEach((q) => {\r\n          // iterate through the technologies that the buzzword matches\r\n          buzzTechs.forEach((t) => {\r\n            // if the queue belongs to the tech\r\n            if (tech[t].includes(q.trim())) {\r\n              // add it to the list\r\n              temp += `${q.trim()}, `\r\n            }\r\n          })\r\n        })\r\n        // set the visible queues, removing trailing comma\r\n        matches.visibleQueue = temp.replace(/(^[,\\s]+)|([,\\s]+$)/g, '')\r\n      }\r\n    }\r\n\r\n    // set the state to the result info\r\n    return matches\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      filtered: [],\r\n      query: {\r\n        product: '',\r\n        technology: 'Any',\r\n        buzzwords: '',\r\n      },\r\n      results: {},\r\n    }\r\n    this.handleProductChange = this.handleProductChange.bind(this)\r\n    this.handleBuzzwordsChange = this.handleBuzzwordsChange.bind(this)\r\n    this.handleTechnologyChange = this.handleTechnologyChange.bind(this)\r\n    this.handleFilterClick = this.handleFilterClick.bind(this)\r\n    this.clear = this.clear.bind(this)\r\n    this.resetState = this.resetState.bind(this)\r\n  }\r\n\r\n  /** Performs the lunr search using state/props and static methods */\r\n  doSearch() {\r\n    const {\r\n      prod, tech, techList, index,\r\n    } = this.props\r\n    const { query } = this.state\r\n    // create the lunr search string\r\n    const queryString = Search.createSearchString({ query, techList })\r\n    // if a string is returned\r\n    if (queryString) {\r\n      // do the search\r\n      const filtered = index.search(queryString)\r\n      // set the search results for the dropdown list\r\n      this.setState({ filtered })\r\n      // if there is only one result display its info\r\n      if (filtered.length === 1) {\r\n        const item = filtered[0]\r\n        const results = Search.findResult({\r\n          item, query, prod, tech,\r\n        })\r\n        this.setState({ results })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * Event handler for the product input.\r\n    * Changes state and then starts the search.\r\n    * @param  {String} newProd - the new product input\r\n  */\r\n  handleProductChange(newProd) {\r\n    // clear the dropdown and results and change query\r\n    this.setState((prevState) => ({\r\n      query: { // object that we want to update\r\n        ...prevState.query, // keep all other key-value pairs\r\n        product: newProd,\r\n        buzzwords: '',\r\n      },\r\n      filtered: [],\r\n      results: {},\r\n    }), () => {\r\n      this.doSearch()\r\n    })\r\n  }\r\n\r\n  /**\r\n    * Event handler for the buzzword input.\r\n    * Changes state and then starts the search.\r\n    * @param  {String} newBuzz - the new buzzword input\r\n  */\r\n  handleBuzzwordsChange(newBuzz) {\r\n    // clear the dropdown and results and change query\r\n    this.setState((prevState) => ({\r\n      query: { // object that we want to update\r\n        ...prevState.query, // keep all other key-value pairs\r\n        buzzwords: newBuzz,\r\n        product: '',\r\n      },\r\n      filtered: [],\r\n      results: {},\r\n    }), () => {\r\n      this.doSearch()\r\n    })\r\n  }\r\n\r\n  /**\r\n    * Event handler for the technology input.\r\n    * Changes state, manipulates results, and then starts the search.\r\n    * @param  {String} newTech - the new technology selection\r\n  */\r\n  handleTechnologyChange(newTech) {\r\n    const { results } = this.state\r\n    const { tech } = this.props\r\n\r\n    this.setState((prevState) => ({\r\n      query: { // object that we want to update\r\n        ...prevState.query, // keep all other key-value pairs\r\n        technology: newTech, // update the value of specific key\r\n      },\r\n    }), () => {\r\n      // the section below is for changing the queue/tech in the results\r\n      // when the technology dropdown is changed\r\n      if (results.product) {\r\n      // set original results\r\n        const resultsClone = { ...results }\r\n        // set the list of original techs\r\n        const originalTech = resultsClone.technology.split(',').map((item) => item.trim())\r\n        // set the state to the technology input value if the original result\r\n        // includes the selected tech we will narrow down the visible queues\r\n        if (originalTech.includes(newTech)) {\r\n        // set the temp string of queues which is what will be visible\r\n          let temp = ''\r\n          // create the list of queues in the original results\r\n          const originalQueues = resultsClone.queue.split(',')\r\n          // iterate through the queues\r\n          originalQueues.forEach((query) => {\r\n          // if the queue belongs to the selected tech\r\n            if (\r\n              tech[newTech.replace(/\\s/g, '')].includes(\r\n                query.trim(),\r\n              )\r\n            ) {\r\n            // add it to the temp string\r\n              temp += query.trim()\r\n            }\r\n          })\r\n          // set the temp string to the visible results\r\n          resultsClone.visibleQueue = temp\r\n\r\n          this.setState({ results: resultsClone })\r\n        } else if (newTech === 'Any') {\r\n          resultsClone.visibleQueue = resultsClone.queue\r\n        } else {\r\n        // clear the dropdown and results\r\n          this.setState({ filtered: [], results: {} })\r\n        }\r\n      } else {\r\n      // clear the dropdown and results\r\n        this.setState({ filtered: [], results: {} })\r\n      }\r\n      this.doSearch()\r\n    })\r\n  }\r\n\r\n  /**\r\n    * Event handler for clicking on a search suggestion.\r\n    * Finds results for the clicked item and sets them to state.\r\n    * @param  {Object} item - the selected product\r\n  */\r\n  handleFilterClick(item) {\r\n    const { prod, tech } = this.props\r\n    const { query } = this.state\r\n    const results = Search.findResult({\r\n      item, query, prod, tech,\r\n    })\r\n    this.setState({ results })\r\n  }\r\n\r\n  /** resets the state and clears the input UI */\r\n  clear() {\r\n    this.resetState()\r\n    this.inputProd.clear()\r\n    this.inputTech.clear()\r\n  }\r\n\r\n  resetState() {\r\n    window.history.replaceState({}, document.title, '/products')\r\n    this.setState({\r\n      filtered: [],\r\n      query: {\r\n        product: '',\r\n        technology: 'Any',\r\n        buzzwords: '',\r\n      },\r\n      results: {},\r\n    })\r\n  }\r\n\r\n  render() {\r\n    // deconstruct state\r\n    const {\r\n      query, results, filtered,\r\n    } = this.state\r\n    // deconstruct props\r\n    const {\r\n      techList, isMobile,\r\n    } = this.props\r\n\r\n    // if inputs are empty disable clear button\r\n    const buttonDisabled = !(query.product\r\n      || query.buzzwords\r\n      || query.technology !== 'Any'\r\n      || results.length > 0)\r\n\r\n    return (\r\n      <ErrorBoundary resetState={this.resetState}>\r\n        <Row className=\"mt-2 mr-1\">\r\n          <Col md={{ size: 1, offset: 11 }}>\r\n            <Button\r\n              className=\"float-right\"\r\n              outline\r\n              color=\"success\"\r\n              size=\"sm\"\r\n              disabled={buttonDisabled}\r\n              onClick={this.clear}\r\n            >\r\n              clear\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        {isMobile ? ( // if the device is mobile put the product dropdown on the bottom\r\n          <Row className=\"justify-content-md-center ml-2 mr-2\">\r\n            <Col className=\"mb-2 mt-1\" md={{ size: 4, offset: 0 }}>\r\n              <Result results={results} />\r\n            </Col>\r\n            <Col className=\"mb-2 mt-1\" md={{ size: 3, offset: 0 }}>\r\n              <Technology\r\n                ref={(input) => { this.inputTech = input }}\r\n                onTechnologyChange={this.handleTechnologyChange}\r\n                techList={techList}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-1\" md={{ size: 5, offset: 0 }}>\r\n              <Product\r\n                ref={(input) => { this.inputProd = input }}\r\n                filtered={filtered}\r\n                onProductChange={this.handleProductChange}\r\n                onBuzzwordsChange={this.handleBuzzwordsChange}\r\n                onResult={this.handleFilterClick}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <Row className=\"justify-content-md-center ml-2 mr-2\">\r\n            <Col className=\"mb-1\" md={{ size: 5, offset: 0 }}>\r\n              <Product\r\n                ref={(input) => { this.inputProd = input }}\r\n                filtered={filtered}\r\n                onProductChange={this.handleProductChange}\r\n                onBuzzwordsChange={this.handleBuzzwordsChange}\r\n                onResult={this.handleFilterClick}\r\n              />\r\n            </Col>\r\n\r\n            <Col className=\"mb-2 mt-1\" md={{ size: 3, offset: 0 }}>\r\n              <Technology\r\n                ref={(input) => { this.inputTech = input }}\r\n                onTechnologyChange={this.handleTechnologyChange}\r\n                techList={techList}\r\n              />\r\n            </Col>\r\n\r\n            <Col className=\"mb-2 mt-1\" md={{ size: 4, offset: 0 }}>\r\n              <Result results={results} />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </ErrorBoundary>\r\n    )\r\n  }\r\n}\r\n\r\nSearch.defaultProps = {\r\n  index: null,\r\n}\r\n\r\nSearch.propTypes = {\r\n  /** the lunr search index */\r\n  index: PropTypes.instanceOf(Object),\r\n  /** the product key/value pairs to search */\r\n  prod: PropTypes.instanceOf(Array).isRequired,\r\n  /** technologies and their queues */\r\n  tech: PropTypes.instanceOf(Object).isRequired,\r\n  /** list of technologies */\r\n  techList: PropTypes.instanceOf(Array).isRequired,\r\n  /** device type for rendering */\r\n  isMobile: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Search\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Button, Modal, ModalHeader, ModalBody, ModalFooter, NavLink,\r\n} from 'reactstrap'\r\n\r\n/**\r\n * Provides information about the app in a reactstrap modal\r\n * @component\r\n * @author Ben Elan\r\n * @parent Navbar\r\n */\r\n/* eslint-disable max-len */\r\nconst About = ({ buttonLabel, className }) => {\r\n  // state for opening/closing modal\r\n  const [modal, setModal] = useState(false)\r\n  const toggle = () => setModal(!modal)\r\n\r\n  return (\r\n    <>\r\n      <NavLink color=\"link\" onClick={toggle} style={{ cursor: 'pointer' }}>{buttonLabel}</NavLink>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>About</ModalHeader>\r\n        <ModalBody>\r\n          <p>\r\n            The Product to Queue app is a browser-based tool which helps determine the appropriate team/queue to route a case based on product names or buzzwords.\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              To use the app, fill in the product name or buzzword in the search field and click on a product.\r\n            </li>\r\n            <li>\r\n              The results will be returned on the right of the web page.\r\n            </li>\r\n            <li>\r\n              You can filter the queues further by selecting a specific Technology from the dropdown.\r\n            </li>\r\n            <li>\r\n              You can reset the search field and technology by clicking the\r\n              <i> clear </i>\r\n              button on the top-right corner.\r\n            </li>\r\n            <li>\r\n              Please make sure to review the transfer resources before transferring a case.\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            If you have any questions about the products or queues, feel free to contact the\r\n            {' '}\r\n            <a style={{ color: '#5cb85c' }} href=\"mailto:supt-readinessleads@esri.com?subject=Product%20Supportability%20Question\">Readiness Leads</a>\r\n            . Additionally, please report any issues or bugs to the\r\n            {' '}\r\n            <a style={{ color: '#5cb85c' }} href=\"mailto:lxie@esri.com?cc=belan@esri.com&subject=Product%20App%20Issue\">Developers</a>\r\n            .\r\n          </p>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"success\" outline onClick={toggle}>Okay</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nAbout.defaultProps = {\r\n  className: undefined,\r\n}\r\n\r\nAbout.propTypes = {\r\n  /** label for the button that opens the modal */\r\n  buttonLabel: PropTypes.string.isRequired,\r\n  /** class name for styling */\r\n  className: PropTypes.string,\r\n}\r\n\r\nexport default About\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from 'reactstrap'\r\nimport About from './About'\r\n\r\n/**\r\n * Reactstrap navigation menu\r\n * @component\r\n * @author Ben Elan\r\n * @parent App\r\n * @child About\r\n */\r\nconst Navb = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  const linkStyle = {\r\n    color: 'black',\r\n    fontSize: '16px',\r\n    padding: 0,\r\n    margin: 0,\r\n    marginLeft: -15,\r\n    marginRight: -15,\r\n  }\r\n\r\n  return (\r\n    <Navbar dark style={{ backgroundColor: '#206a5d' }} expand=\"md\">\r\n      <NavbarBrand style={{ cursor: 'default' }}>\r\n        {' '}\r\n        <img src={`${process.env.PUBLIC_URL}/esri.png`} style={{ width: 25, height: 25 }} alt=\"\" />\r\n        {' '}\r\n        Product to Queue\r\n      </NavbarBrand>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"mr-auto\" navbar>\r\n          <NavItem>\r\n            <About buttonLabel=\"About\" />\r\n          </NavItem>\r\n          <UncontrolledDropdown nav inNavbar>\r\n            <DropdownToggle nav caret>\r\n              Transfer Resources\r\n            </DropdownToggle>\r\n            <DropdownMenu\r\n              style={{\r\n                top: 35, left: +8, padding: 0, margin: -2,\r\n              }}\r\n            >\r\n              <DropdownItem className=\"highlightStyle\">\r\n                <NavLink\r\n                  style={linkStyle}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href=\"https://esri.lightning.force.com/lightning/r/Knowledge__kav/ka15x0000008f0KAAQ/view\"\r\n                >\r\n                  Data Management\r\n                </NavLink>\r\n              </DropdownItem>\r\n              {/* <DropdownItem divider /> */}\r\n              <DropdownItem className=\"highlightStyle\">\r\n                <NavLink\r\n                  style={linkStyle}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  href=\"https://esri.lightning.force.com/lightning/r/Knowledge__kav/ka15x0000008kIXAAY/view\"\r\n                >\r\n                  Developer Products\r\n                </NavLink>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Navb\r\n","/* eslint-disable react/no-this-in-sfc */\r\nimport React, { useState, useEffect } from 'react'\r\nimport Papa from 'papaparse'\r\nimport lunr from 'lunr'\r\nimport Search from './components/Search'\r\nimport Navb from './components/ui/Navb'\r\nimport ErrorBoundary from './components/ErrorBoundary'\r\n\r\n/**\r\n * Loads CSV data, parses it to JSON, and creates a search index\r\n * @author Ben Elan\r\n * @component\r\n * @child Navbar, Search\r\n */\r\nconst App = () => {\r\n  const [index, setIndex] = useState(null)\r\n  const [product, setProd] = useState([])\r\n  const [technology, setTech] = useState({})\r\n  const [technologyList, setTechList] = useState([])\r\n  const [isMobile, setMobile] = useState(false)\r\n\r\n  /**\r\n   * Checks if the device is mobile based on user agent\r\n   * The UI renders differently on mobile for readability\r\n   * @method\r\n   * @static\r\n   * @return {Boolean} is it a mobile device?\r\n   */\r\n  const checkIsMobile = () => !!(\r\n    /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\r\n      navigator.userAgent,\r\n    )\r\n      || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw(n|u)|c55\\/|capi|ccwa|cdm|cell|chtm|cldc|cmd|co(mp|nd)|craw|da(it|ll|ng)|dbte|dcs|devi|dica|dmob|do(c|p)o|ds(12|d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(|_)|g1 u|g560|gene|gf5|gmo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd(m|p|t)|hei|hi(pt|ta)|hp( i|ip)|hsc|ht(c(| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i(20|go|ma)|i230|iac( ||\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|[a-w])|libw|lynx|m1w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|mcr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|([1-8]|c))|phil|pire|pl(ay|uc)|pn2|po(ck|rt|se)|prox|psio|ptg|qaa|qc(07|12|21|32|60|[2-7]|i)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h|oo|p)|sdk\\/|se(c(|0|1)|47|mc|nd|ri)|sgh|shar|sie(|m)|sk0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h|v|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl|tdg|tel(i|m)|tim|tmo|to(pl|sh)|ts(70|m|m3|m5)|tx9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas|your|zeto|zte/i.test(\r\n        navigator.userAgent.substr(0, 4),\r\n      )\r\n  )\r\n\r\n  /**\r\n   * Fetches csv and parses it to json\r\n   * @method\r\n   * @static\r\n   * @param  {String} path - where to fetch csv\r\n   * @return {Object} parsed json data\r\n   */\r\n  const getData = (pathToCSV) => new Promise((resolve, reject) => {\r\n    Papa.parse(pathToCSV, {\r\n      download: true,\r\n      complete(data) {\r\n        resolve(data)\r\n      },\r\n      error(err) {\r\n        reject(err)\r\n      },\r\n    })\r\n  })\r\n\r\n  /**\r\n    * Parses csv data into format needed by Lunr\r\n    * @method\r\n    * @static\r\n    * @param  {Object} jsonData - the JSON data parsed from the csv\r\n    * @return {Object} contains the properties below\r\n    * @return {Array} - prod: the product key/value pairs to search\r\n    * @return {Object} - tech: the key technologies and their queues\r\n      @return {Array} - techList: list of technologies for dropdown\r\n  */\r\n  const parseData = (jsonData) => {\r\n    const prod = [] // final json of products\r\n    const tech = {} // final json of tech to queue\r\n    const techList = [] // for populating the dropdown menu\r\n    const header = jsonData[0] // the header of the csv\r\n\r\n    const len = header.length - 1\r\n    // iterate through the technology/buzzword pairs\r\n    for (let i = 1; i < len - 2; i += 2) {\r\n      // init the json of technologies to queues\r\n      const t = header[i].replace(/\\s/g, '')\r\n      tech[t] = []\r\n      techList.push(header[i])\r\n    }\r\n    // iterate through the rows\r\n    jsonData.forEach((row, idx) => {\r\n      // if the row is not the header\r\n      if (idx !== 0) {\r\n        // init the product object\r\n        const object = { product: row[0] } // set the product to the value\r\n\r\n        let t = '' // init tech string\r\n        let q = '' // init queue string\r\n        for (let i = 1; i < len - 2; i += 2) {\r\n          // iterate through the technologies\r\n          if (row[i]) {\r\n            // if the queue isn't blank\r\n            q += `${row[i]}, ` // add the queue to the product's list\r\n            t += `${header[i]}, ` // add the tech to the product's list\r\n            // adds the buzzwords for each tech\r\n            // removes spaces in tech like 'Data Management' for the new buzzword variable name\r\n            object[`b_${header[i].replace(/\\s/g, '')}`] = row[i + 1]\r\n            if (!tech[header[i].replace(/\\s/g, '')].includes(row[i])) {\r\n              // if the queue hasn't already been added to the tech object\r\n              tech[header[i].replace(/\\s/g, '')].push(row[i]) // add it\r\n            }\r\n          }\r\n        }\r\n        // regex strips trailing comma from the queue and tech strings\r\n        const strippedT = t.replace(/(^[,\\s]+)|([,\\s]+$)/g, '')\r\n        const strippedQ = q.replace(/(^[,\\s]+)|([,\\s]+$)/g, '')\r\n        // set the queue, tech, and support method values\r\n        object.technology = strippedT\r\n        object.queue = strippedQ\r\n        object.supportMethod = row[len - 1]\r\n        // if there is a reference and it is an email address\r\n        if (row[len] && row[len].includes('@')) {\r\n          // set it to the value of email\r\n          object.email = row[len]\r\n        } else {\r\n          // otherwise set it to the value of url\r\n          object.url = row[len]\r\n        }\r\n        prod.push(object) // add the prod object to the array of products\r\n      }\r\n    })\r\n\r\n    const finalResults = {\r\n      prod,\r\n      tech,\r\n      techList,\r\n    }\r\n    return finalResults\r\n  }\r\n\r\n  /**\r\n   * Creates the lunr search index\r\n   * @param  {Object} documents - The key:value pairs to be searched\r\n   * @param  {Object} techArray - the full list of technologies\r\n   * @return {Object} the search index\r\n   */\r\n  const createIndex = (documents, techArray) => lunr(function idx() {\r\n    // stemming causes issues when doing wildcard searches\r\n\r\n    this.pipeline.remove(lunr.stemmer)\r\n    this.pipeline.remove(lunr.trimmer)\r\n    this.pipeline.remove(lunr.stopWordFilter)\r\n    this.searchPipeline.remove(lunr.stemmer)\r\n    this.searchPipeline.remove(lunr.trimmer)\r\n    this.searchPipeline.remove(lunr.stopWordFilter)\r\n    // the ref is the unique identifier\r\n    this.ref('product')\r\n    // the fields are for searching\r\n    this.field('product')\r\n    this.field('technology')\r\n\r\n    // this makes the buzzword fields for each tech searchable\r\n    // buzzwords in the form of b_Online, b_SDK, etc\r\n    techArray.forEach((t) => {\r\n      this.field(`b_${t.replace(/\\s/g, '')}`)\r\n    })\r\n\r\n    documents.forEach((doc) => {\r\n      this.add(doc)\r\n    }, this)\r\n  })\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      // get the csv and convert it to json\r\n      const response = await getData('./data/product_queue.csv')\r\n      // parse the json creating objects/arrays\r\n      const { prod, tech, techList } = parseData(response.data)\r\n      // create the search index\r\n      const idx = createIndex(prod, techList)\r\n      // check if the user agent is a mobile device\r\n      const mobile = checkIsMobile()\r\n\r\n      setTech(tech)\r\n      setProd(prod)\r\n      setTechList(techList)\r\n      setIndex(idx)\r\n      setMobile(mobile)\r\n    })()\r\n  }, [])\r\n\r\n  // window.onerror = () => { document.location.reload(); return false }\r\n  return (\r\n    <ErrorBoundary buttonClass=\"btn btn-success btn-sm ml-2\">\r\n      <Navb />\r\n      <Search\r\n        index={index}\r\n        prod={product}\r\n        tech={technology}\r\n        techList={technologyList}\r\n        isMobile={isMobile}\r\n      />\r\n    </ErrorBoundary>\r\n  )\r\n}\r\n\r\nexport default App\r\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n  // [::1] is the IPv6 localhost address.\r\n  || window.location.hostname === '[::1]'\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  || window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n  ),\r\n)\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((reg) => {\r\n      const registration = reg\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      )\r\n    })\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}